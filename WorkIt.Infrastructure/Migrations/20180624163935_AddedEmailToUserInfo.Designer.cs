// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkIt.Infrastructure.DataAccess;

namespace WorkIt.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180624163935_AddedEmailToUserInfo")]
    partial class AddedEmailToUserInfo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("WorkIt.Core.Entities.ApplicationUserOwnedProjects", b =>
                {
                    b.Property<long>("UserInfoId");

                    b.Property<long>("ProjectId");

                    b.HasKey("UserInfoId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectOwners");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ApplicationUserProjectMember", b =>
                {
                    b.Property<long>("UserInfoId");

                    b.Property<long>("ProjectId");

                    b.HasKey("UserInfoId", "ProjectId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectMembers");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.Project", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<long>("CreatedById");

                    b.Property<string>("Description");

                    b.Property<bool>("IsOpenToJoin");

                    b.Property<bool>("IsPubliclyVisible");

                    b.Property<DateTime>("ModifiedAt");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ProjectThread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById");

                    b.Property<long?>("CreatedById1");

                    b.Property<long>("ProjectId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById1");

                    b.HasIndex("ProjectId");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ThreadEntry", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("CreatedById");

                    b.Property<long?>("CreatedById1");

                    b.Property<long>("GroupThreadId");

                    b.Property<long?>("ThreadId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById1");

                    b.HasIndex("ThreadId");

                    b.ToTable("ThreadEntries");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ThreadEntryReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<long?>("CreatedById1");

                    b.Property<string>("ReactionTag");

                    b.Property<long>("ThreadEntryId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById1");

                    b.HasIndex("ThreadEntryId");

                    b.ToTable("ThreadEntryReactions");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.UserInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<string>("Firstname");

                    b.Property<string>("Lastname");

                    b.Property<string>("OpenIdSub");

                    b.HasKey("Id");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ApplicationUserOwnedProjects", b =>
                {
                    b.HasOne("WorkIt.Core.Entities.Project", "Project")
                        .WithMany("Owners")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkIt.Core.Entities.UserInfo", "UserInfo")
                        .WithMany("OwnedProjects")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ApplicationUserProjectMember", b =>
                {
                    b.HasOne("WorkIt.Core.Entities.Project", "Project")
                        .WithMany("Members")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorkIt.Core.Entities.UserInfo", "UserInfo")
                        .WithMany("MemberProjects")
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkIt.Core.Entities.Project", b =>
                {
                    b.HasOne("WorkIt.Core.Entities.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ProjectThread", b =>
                {
                    b.HasOne("WorkIt.Core.Entities.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById1");

                    b.HasOne("WorkIt.Core.Entities.Project", "Project")
                        .WithMany("Threads")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ThreadEntry", b =>
                {
                    b.HasOne("WorkIt.Core.Entities.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById1");

                    b.HasOne("WorkIt.Core.Entities.ProjectThread", "Thread")
                        .WithMany("Entries")
                        .HasForeignKey("ThreadId");
                });

            modelBuilder.Entity("WorkIt.Core.Entities.ThreadEntryReaction", b =>
                {
                    b.HasOne("WorkIt.Core.Entities.UserInfo", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById1");

                    b.HasOne("WorkIt.Core.Entities.ThreadEntry", "ThreadEntry")
                        .WithMany("Reactions")
                        .HasForeignKey("ThreadEntryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
